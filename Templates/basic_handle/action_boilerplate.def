/* -*- mode:c -*- */
/**
 * @file action_boilerplate.def
 * @brief Boilerplate provisions for implementing a help display function.
 */

#include "handle.h"            // for H_TEMPLATE (handle) prototype
#include "dispatcher.h"        // for AVERB definition
#include "argeater_setters.h"  // argeater_setters sending errors to TEMPLATE_ERROR
#include "error_handling.h"    // for ERROR_SINK function pointer
#include <stdio.h>             // printf
#include <stdbool.h>           // for bool data type

/***** Steps to add a new handle action:
 * 1. Replace 'boilerplate' substrings with the new action name.
 *    'TEMPLATE', if it remains, should replaced at a higher level
 *    to change for the project.
 * 2. Construct the Argument Map
 *    a. Declare file-scope variables to hold option values.
 *    b. Create AE_ITEM array for the file-scope variables.
 *    c. Instantiate the argument map (AE_MAP).
 * 3. Code the "action function" that performs the action
 *    a. Set default values of file-scope variables.
 *    b. Run `argeater_process` to retrieve user's arguments.
 *    c. Perform action's mission according to user's intention.
 *    d  Release any resources that were acquired through
 *       the setters (especially a stream or file handle).
 * 4. Update the AVERB definition with specifics of this action.
 * 5. Update file `table_of_actions.c`
 *    a. Add extern declaration to the new AVERB definition.
 *    b. Add pointer to extern AVERB to the action trable.
 *****/


/***** CONSTRUCT THE ARGUMENT MAP *****/

// STATUS VARIABLES
// File-scope status variable(s) that will contain the
// command-line argument settings after the argument map
// to which they are attached is used by argeater's
// `argeater_process` function.
static bool flag_variable = false;
static long long_value = 0;
static FILE *file;

// ACTIONS ARRAY
// Array of items that associate status variables to the means
// to access them and text to be used in a help display.
// NOTE that the strings are also used for the generated help
// displays, so review help displays and adjust as appropriate.
AE_ITEM boilerplate_actions[] = {
   {
      (const char**)&flag_variable,   // cast (if necessary) for pointer to status var
      "flag",                         // name of verb, for the help display and,
                                      // depending on the action type, how it is
                                      // set on the command line  (--flag)
      'f',                            // If not 0 or \0, then depending on the action
                                      // type, option letter to use to set the
                                      // variable (-f)
      AET_FLAG_OPTION,                // action type (see man 3 argeaters)
      "Set flag to toggle a settings",// description of action
      NULL,                           // preferred name to use for help displays if
                                      // the name member is not appropriate
      TEMPLATE_argeater_bool_setter   // Specific setter function pointer.  Uses
                                      // argeater_string_setter as default if this
                                      // value is NULL
   },

   {(const char **)&long_value, "int", 'i', AET_VALUE_OPTION,
    "Set an unassuming long-integer value", NULL, TEMPLATE_argeater_long_setter},

   {(const char **)&file, "file", '\0', AET_ARGUMENT,
    "File stream to read", NULL, TEMPLATE_argeater_stream_setter }
};

// ACTION MAP
// This struct combines the array and its length for safe
// access to its contents for interpreting the command line
// arguments and for display help information
AE_MAP TEMPLATE_boilerplate_arg_map = INIT_MAP(boilerplate_actions);

/***** END CONSTRUCTION OF THE ARGUMENT MAP *****/

/***** Action Implementation *****/

int TEMPLATE_boilerplate(H_TEMPLATE *handle, ACLONE *args)
{
   int exit_code = EXECUTION_FAILURE;

   // Initialize STATUS VARIABLES for each action invocation:
   flag_variable = false;
   long_value = 0;
   file = NULL;

   if (argeater_process(args, &TEMPLATE_boilerplate_arg_map))
   {
      // Handle allocated resources (open stream) first
      // to ensure they are deallocated upon exit:
      if (file==NULL)
         (*ERROR_SINK)("TEMPLATE:boilerplate failed to open required file");
      else
      {
         if (flag_variable)
            printf("You set the flag on.\n");

         printf("The long value set is (or remains): %ld.\n", long_value);

         // Use the file, then
         fclose(file);
      }
   }
   else
      exit_code = EXECUTION_FAILURE;

   return exit_code;
}

/***** AVERB for action table *****/

AVERB TEMPLATE_boilerplate_verb = {
   "boilerplate",                    // verb name to match
   "boilerplate action",             // description to use for 'help' action
   "TEMPLATE boilerplate",           // invocation of verb
   true,                             // true if handle must already be declared
   TEMPLATE_boilerplate,             // reference to action function
   &TEMPLATE_boilerplate_arg_map     // reference to argument map (for help display)
};
