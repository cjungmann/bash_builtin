.\" obfuscate the t-word to prevent its being replaced by 'sed'
.\" with other occurrences of the word:
.de Tword
.R T\c
.R E\c
.R M\c
.R P\c
.R L\c
.R A\c
.R T\c
.R E\c
..
.de tword
.R t\c
.R e\c
.R m\c
.R p\c
.R l\c
.R a\c
.R t\c
.R e
..
.TH README 7
.SH NAME
.B README
\- Hints for using this
.tword
directory for new projects
.SH DESCRIPTION
.PP
This
.tword
directory aims to speed development of new Bash builtin projects
utilitizing a handle model.
It includes:
stubs for
.IR help " and " declare
actions, man pages, a boilerplate
(\c
.tword \c
)
for new actions, and a some simple scripts that perform several
setup steps for easier customization.
.SS USING SCRIPTS
.PP
There are two main scripts,
.BR change_names " and " spawn_action ,
that should make developing a new handle-based Bash builtin much
easier.
They each perform several steps in their own domain.
The scripts can be used a black-boxes as are about to show, and the
details of what they do will be discussed below.
.SH USING BASIC_HANDLE TEMPLATE
.PP
This section will show how to use the contents of this directory
and the tools contained within it to get a headstart with a new
handle-based Bash builtin command.
.SS START A NEW PROJECT
.PP
Let's pretend we're making a new handle-based Bash builtin named
.BR newc .
.TS
tab(|);
l lx.
T{
.EX
cp -r ../basic_handle ~/work/newc
.EE
T}|T{
Copy this directory to a new project directory.
T}

T{
.EX
cd ~/work/newc
.EE
T}|T{
Enter the new directory.
T}

T{
.EX
\&./change_names newc
.EE
T}|T{
Change file contents and file and directory names to use the project name.
T}

T{
.EX
make
.EE
T}|T{
Create the barebones Bash builtin.
T}
.TE
.SS ADDING NEW ACTIONS WITH spawn_action SCRIPT
.PP
Define actions to extend the handle's utility.
.PP
The
.B spawn_action
script uses
.B action_boilerplate.def
as a model for creating an empty action source file.
The new source file contains a skeleton of code upon which a new
handle action can be developed.
.B spawn_action
also updates
.B table_of_actions.c
to enable the new action in the list of actions.
.PP
The following example creates a new action,
.BR print ,
with the
.B spawn_action
script.
.EX
./spawn_action print
.EE
.PP
A new source file,
.BR action_print.c ,
will be created and the
.B action
verb and function reference will be added to the appropriate
structures in
.BR table_of_actions.c .

.SH SETUP DETAILS
.PP
This is not about starting from scratch.
The
.tword
provides a scaffolding in which a complete project can be built.
This section describes what is provided in the template, the
structure of the parts, and the steps needed to add your project's
unique flair.
.SS PROVISIONS
.PP
There are several source files that provide complete functionality.
.BR dispatcher.c ", " error_handling.c ", " shell_vars.c ,
and their associated headers may well be left alone without
modification, as well as
.BR main.c ,
which has no header file.
.PP
Some source files are expected to be modified, namely
.BR handle.c ", " handle.h ", and " table_of_actions.c .
.SS CUSTOM HANDLE
.PP
There are two areas of customization, the
.BR handle " and the " table_of_actions .
The
.B handle must include at least a working identifier function
with a
.B _p
suffix and a casting function with a
.B _cell
suffix.
These functions and/or macros follow the convention used in the
Bash source code, and the
.tword
uses them in
.BR dispatcher.c .
Besides the identified and casting functions, the
.BR handle.c " and " handle.h file can and should be augmented with
code for initializing, destroying, and navigating handles.
.SH REMOVING AN ACTION
.PP
When it is deemed necessary to remove an action from an handle,
the only requirement is to remove the
.B AVERB
entry in the
.B TEMPLATE_action_table
array.
It's best to delete the source file and the extern reference to it,
but that can be safely deferred because without the reference in the
array, the extern statement and source file will be ignored.
