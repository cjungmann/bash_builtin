#!/usr/bin/env bash
source mod_common
bi_enable

cat <<EOF
${B}
Demonstrate builtin function 'read_array'
=========================================
${X}
Array variables are a very useful Bash feature that I want to
be able to access from the builtin C code.  This function is
an experiment for access to script-declared arrays.

This experiment declares and initializes an array variable,
then passes the name of the variable to a builtin function
named ${B}read_array${X}.

EOF

run_test()
{
    local -a myarray
    myarray=( One Two Three Four Five )
    myarray+=( Six )

    local -a rearr=(
        ^
        \(              # group 1
           [^@]+        # recipient
        \)
        @               # match but don't capture
        \(              # group 2
        .\*             # sub-domain.  Prevent OS substitution with
                        # single-escaped asterisk
        \)
        \(              # group 3
           \\.          # match but don't capture.  Prevent regex wildcard
                        # match with double-escaped dot
           \(           # group 4
              [^\\.]+   # match non-dot characters, prevent regex wildcard match
           \)
        \)
        $
    )
    local OIFS="$IFS"
    local IFS=''
    local re="${rearr[*]}"
    echo "re is $B${re}$X"
    IFS="$OIFS"
    unset OIFS

    local email_addr="john.doe@gamail.com"

    echo "About to part $B${email_addr}$X with the regular expression."

    if [[ "$email_addr" =~  $re ]]; then
        echo "String matched the regular expression"
    else
        echo "String failed to match the regular expression"
    fi

    echo
    echo "About to call $Bread_array$X with the two arrays."
    echo "Output after this point generated by the builtin."
    echo
    read_array "myarray" "BASH_REMATCH"
}

run_test
