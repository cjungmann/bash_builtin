// -*- mode:c -*-

/***
 * Todo:
 * - Update `FNAME()` function, delete or fill out as needed
 * - Add detailed instructions to desc_FNAME string array.
 * - Compose more helpful .short_doc string
 * - Finally, replace-string <FNAME> with your builtin function's name.
 ***/

#include <builtins.h>

// Prevent multiple inclusion of shell.h:
#ifndef EXECUTION_FAILURE
#include <shell.h>
#endif

#include <builtins/bashgetopt.h>  // for internal_getopt(), etc
#include <builtins/common.h>      // for no_options()

static int <FNAME>(WORD_LIST *list)
{
   /************************************
    *     Start of OPTIONS section
    *
    * Delete if not needed:
    * Remove until code until
    * 'End of OPTIONS section'
    * below
    ***********************************/

   // Show usage if no options are set
   if (no_options(list))
      return EX_USAGE;

   reset_internal_getopt();

   // Process options, pick off, as options, arguments
   // formed -X where x is any single letter, and "abc"
   // second parameter of `internal_getopt` is the list
   // of available option letters:
   int opt;
   while (-1 != (opt = internal_getopt(list, "abc:")))
   {
      switch(opt)
      {
         case 'a': break;
         case 'b': break;
         case 'c':
            // The option value, when the letter is followed by a ':'
            // as in 'c:' in call to `internal_getopt` above, is
            // found in the the `list_optarg` variable when the
            // letter is matched.
            break;
         default: do_stuff(); break;
      }
   }

   // ONLY IF USING `internal_getopt`, reset the list
   // to process any remaining non-option arguments:
   list = loptend;

   /************************************
    *     End of OPTIONS section
    ***********************************/

   /************************************
    *     Start of ARGUMENTS section
    ***********************************/

   WORD_LIST *ptr = list;
   while (ptr)
   {
      // Process the option

      ptr = ptr->next;
   }
   /************************************
    *     End of ARGUMENTS section
    ***********************************/

   return EXECUTION_SUCCESS;
}

static char *desc_<FNAME>[] = {
   "First of several lines providing comprehensive help.",
   (char*)NULL     // end of array marker
};

struct builtin <FNAME>_struct = {
   .name      = "<FNAME>",
   .function  = <FNAME>,
   .flags     = BUILTIN_ENABLED,
   .long_doc  = desc_<FNAME>,
   .short_doc = "<FNAME> is cool",
   .handle    = 0
};
