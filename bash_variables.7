.TH bash_variables 7 "Miscellaneous Information Manual" 2023-04-28
.SH NAME
.PP
.B bash_variables
\- Manipulating Bash Variables in a Bash Builtin
.SH DESCRIPTION
.PP
Bash includes several standard variable types:
.TS
tab(|);
lb lb lb
l l l.
type|option|description
_
generic|n/a|string variable that can be used in any context
integer|-i|T{
for integer values, warns upon attempt to store
non-integer value
T}
array|-a|T{
standard array, entry-order preserved.
Implemented as a singly-linked list.
T}
associative|-A|T{
Hashed-key collection of values.
Entry order
.B not
preserved.
T}
nameref|-n|T{
indirect access to another variable through an alias name
T}
.TE
.SH SETTING VARIABLES
.SS MISTYPED VARIABLES
.PP
In a script, declaring a variable with the
.B -i
(integer) option limits what can be done with the variable.
If a string value is assigned to an integer variable, Bash will
sometimes issue a warning, other times it will simply set the
integer value to 0.
.PP
From a developer's standpoint, and this point may be debated, it
would be better to warn or error out a mistyped assignment, but
we have to live with what we get.
.PP
Unfortunately, in Bash builtins, assigning a string value to
an integer variable sets the
.B value
struct member to the string value, but leaves the attributes value
the same.  That is, the string assignment works, the value of the
variable is the string value, despite the attributes indicating that
the variable type is
.BR integer .
.PP
If maintaining type safety is important, the C code will have to
check the
.B SHELL_VAR
attributes and proceed with warning, error, or ignoring according
to needs of the specific application.
.SS INVISIBLE VARIABLES
.PP
Some situations will silently cause a C-code assignment to a variable
to be silently ignored.
.PP
If a script
.I declares
a variable without assigning it a value, the variable will be flagged
as
.BR invisible ,
using variable attribute
.BR att_invisible .
Values assigned to an invisible variable seem to be ignored.
The simple solution is to remove the
.B att_invisible
flag before assigning:
.IP
.EX
SHELL_VAR *svar = find_variable(variable_name);
if (invisible_p(svar))
   VUNSETATTR(svar, att_invisible);
var_setvalue(svar, savestring(new_value));
.EE
.SH GENERIC VARIABLE
.PP
This is the variable type created when no options are specified
when a the variable is created with
.BR declare " or " local .

.SS ACCESS
.SS CREATION
.SS REFERENCE

.SH INTEGER VARIABLE
.PP
This variable type insists on integer values, and emits an
error upon an attempt to assign it a non-integer value.
.SS ACCESS
.SS CREATION
SHELL_VAR* bind_int_variable(const char *name, const char *value, flags)
.SS REFERENCE


.SH ARRAY
.PP
Simple collection of values that retains the order in which
they are added to the variable.
.SS ACCESS
.SS CREATION
.PP
.EX
unbind_global_variable_noref("BASH_REMATCH");
SHELL_VAR* make_new_array_variable("BASH_REMATCH");
assign_array_var_from_word_list(target, wlist, 0/*?*/);
WORD_LIST *array_to_word_list(ARRAY*);
WORD_LIST *array_keys_to_word_list(ARRAY*);
.EE
.SS REFERENCE
.PP
.I /bash_source/lib/sh/shmatch.c
includes code that populates the
.B BASH_REMATCH
array with the results of a regular expression match.

.SH ASSOCIATIVE ARRAY
.PP
An associative array is an array whose elements are accessed through
hashed key values.
.SS ACCESS
.TP
.B Get All Key Values \fR\(Do{!name[@]} \fP
Use Bash Builtin function
.BR assoc_keys_to_word_list() ,
which is equivalent to the script code
.IR \(Do{!name[@]} .
.SS CREATION
.SS REFERENCE
.PP
The functions discussed in the section are found in
.BR assoc.h .

.SH TEMPLATE
.PP
Description
.SS ACCESS
.SS CREATION
.SS REFERENCE
